plot(jj)
plot(log(jj))
qinfl
plot(qinfl)
plot(log(qinfl))
plot(log(1+qinfl))
plot(qinfl)
lm(qinfl ~ 1:length(qinfl))
length(qinfl)
lm(qinfl ~ 1:110)
ti = 1:110
lm(qinfl ~ ti)
lm(qinfl ~ ti) %>% summary()
x <- qinfl +0.93 -ti*0.092360
plot(x)
auto.arima(x)
auto.arima(x, ic = "bic")
x
as.matrix(x)
x[seq(1,110,4)]
mean(x[seq(1,110,4)])
mean(x[seq(2,110,4)])
mean(x[seq(3,110,4)])
mean(x[seq(4,110,4)])
mean(qinfl[seq(4,110,4)])
mean(qinfl[seq(1,110,4)])
mean(qinfl[seq(2,110,4)])
mean(qinfl[seq(3,110,4)])
mean(qinfl[seq(4,110,4)])
plot(qinfl)
110/4
28*4
27*4
28*3
110-28*3
qinfl
27*2
27*2+26*2
27*2+27*2
28*2+27*2
# Create a data frame that allows us to estimate trend and seasonality:
trendseason_df <- data.frame(y=qinfl,
s1 = rep(c(1,0,0,0), 28),
s2 = rep(c(0,1,0,0), 28),
s3 = rep(c(0,0,1,0), 27),
s4 = rep(c(0,0,0,1), 27),
tt = time(qinfl))
# Create a data frame that allows us to estimate trend and seasonality:
trendseason_df <- data.frame(y=qinfl,
s1 = c(rep(c(1,0,0,0), 27), 1, 0),
s2 = c(rep(c(0,1,0,0), 27), 0, 1),
s3 = c(rep(c(0,0,1,0), 27), 0, 0),
s4 = c(rep(c(0,0,0,1), 27), 0, 0),
tt = time(qinfl))
trendseason_df
lm(y~s1 + s2 + s3 + s4 + tt - 1)
lm(y~s1 + s2 + s3 + s4 + tt - 1, data = trendseason_df)
summary(lm(y~s1 + s2 + s3 + s4 + tt - 1, data = trendseason_df))
x <- residuals(lm(y~s1 + s2 + s3 + s4 + tt - 1, data = trendseason_df))
plot(x)
plot(ts(x))
auto.arima(ts(x))
test <- read.csv("CPALTT01USQ657N.csv")
test
qinfl
# Full approach
# get the data: not that we keep only data up to the end of 2014, so that we can
# forecast the
infl <- window(qinfl, end = c(1978, 4))
infl
# plot
plot(infl)
grid()
trendseason_df <- data.frame(y=infl,
s1 = rep(c(1,0,0,0), length(infl)/4),
s2 = rep(c(0,1,0,0), length(infl)/4),
s3 = rep(c(0,0,1,0), length(infl)/4),
s4 = rep(c(0,0,0,1), length(infl)/4),
tt = time(infl))
# Estimate the parameters: run without intercept
trendseason_reg <- lm(y ~ tt + s1 + s2 + s3 + s4 -1, data = trendseason_df)
# Define a0:
a0 <- mean(coef(trendseason_reg)[c("s1", "s2", "s3", "s4")])
# Get a1:
a1 <- coef(trendseason_reg)["tt"]
# Define the seasonal components:
season_components <- coef(trendseason_reg)[c("s1", "s2", "s3", "s4")] - a0
# Get the residual component:
x <- infl - fitted(trendseason_reg)
x
season_components
# Fit ARMA model using the BIC to select the optimal order:
auto.arima(x, d=0, D=0, seasonal=FALSE, ic = "bic")
# Fit ARMA model using the BIC to select the optimal order:
reminder_model <- auto.arima(x, d=0, D=0, seasonal=FALSE, ic = "bic")
reminder_model
forecast::forecast(reminder_model)
# Obtain forecasts:
library(forecast)
?forecast
x_predicted <- forecast(reminder_model, h = 8)
x_predicted
x_predicted$mean
reminder_model_forecast <- forecast(reminder_model, h = 8)
x_predicted <- reminder_model_forecast$mean
x_predicted
plot(x)
lines(x_predicted)
plot(x, xlim = c(1955, 1980))
lines(x_predicted)
lines(x_predicted, col="r")
lines(x_predicted, col="red")
plot(x, xlim = c(1954, 1981))
plot(x, xlim = c(1950, 1981))
x
plot(x, xlim = c(1953, 1981))
lines(x_predicted, col="red")
# Forecasts of the seasonal pattern:
season_predicted <- ts(rep(season_components, 2), start = c(1979, 1), frequency = 4)
season_predicted
time(infl)
seq(1979, 1980.75, by = 0.25)
# Forecast of the trend:
tt_future <- seq(1979, 1980.75, by = 0.25)
trend_predicted <- ts(a0 + a1*tt_future, start = c(1979, 1), frequency = 4 )
trend_predicted
# Combine all forecasts:
infl_predicted <-
plot(x,type='o', main='', xlim = c(1953, 1981))
lines(x_predicted, col="red")
lines(x_predicted, col="red", type='o')
# Combine all forecasts:
infl_predicted <- trend_predicted + season_predicted + x_predicted
infl_predicted
plot(infl,type='o', main='', xlim = c(1953, 1981))
lines(infl_predicted, col="red", type='o')
lines(window(qinfl, end = c(1979, 1)), col="blue", type='o')
plot(qinfl,type='o', main='', xlim = c(1953, 1981))
lines(infl_predicted, col="red", type='o')
# Full approach
# get the data: not that we keep only data up to the end of 2014, so that we can
# forecast the
infl <- window(qinfl, end = c(1977, 4))
infl <- window(qinfl, end = c(1977, 4))
# plot
plot(infl)
grid()
# Create a data frame that allows us to estimate trend and seasonality:
trendseason_df <- data.frame(y=infl,
s1 = rep(c(1,0,0,0), length(infl)/4),
s2 = rep(c(0,1,0,0), length(infl)/4),
s3 = rep(c(0,0,1,0), length(infl)/4),
s4 = rep(c(0,0,0,1), length(infl)/4),
tt = time(infl))
# Estimate the parameters: run without intercept
trendseason_reg <- lm(y ~ tt + s1 + s2 + s3 + s4 -1, data = trendseason_df)
# Define a0:
a0 <- mean(coef(trendseason_reg)[c("s1", "s2", "s3", "s4")])
# Get a1:
a1 <- coef(trendseason_reg)["tt"]
# Define the seasonal components:
season_components <- coef(trendseason_reg)[c("s1", "s2", "s3", "s4")] - a0
# Get the residual component:
x <- infl - fitted(trendseason_reg)
# Forecasts of the seasonal pattern:
season_predicted <- ts(rep(season_components, 2), start = c(1979, 1), frequency = 4)
# Forecast of the trend:
tt_future <- seq(1978, 1980.75, by = 0.25)
trend_predicted <- ts(a0 + a1*tt_future, start = c(1978, 1), frequency = 4 )
# Fit ARMA model using the BIC to select the optimal order:
reminder_model <- auto.arima(x, d=0, D=0, seasonal=FALSE, ic = "bic")
reminder_model_forecast <- forecast(reminder_model, h = 8)
x_predicted <- reminder_model_forecast$mean
# Combine all forecasts:
infl_predicted <- trend_predicted + season_predicted + x_predicted
plot(qinfl,type='o', main='', xlim = c(1953, 1981))
lines(infl_predicted, col="red", type='o')
infl_predicted
# Forecasts of the seasonal pattern:
season_predicted <- ts(rep(season_components, 2), start = c(1978, 1), frequency = 4)
# Forecast of the trend:
tt_future <- seq(1978, 1980.75, by = 0.25)
trend_predicted <- ts(a0 + a1*tt_future, start = c(1978, 1), frequency = 4 )
reminder_model_forecast <- forecast(reminder_model, h = 16)
x_predicted <- reminder_model_forecast$mean
# Combine all forecasts:
infl_predicted <- trend_predicted + season_predicted + x_predicted
plot(qinfl,type='o', main='', xlim = c(1953, 1981))
lines(infl_predicted, col="red", type='o')
infl_predicted
qinfl
x_predicted
# Forecasts of the seasonal pattern:
season_predicted <- ts(rep(season_components, 3), start = c(1978, 1), frequency = 4)
# Forecast of the trend:
tt_future <- seq(1978, 1980.25, by = 0.25)
trend_predicted <- ts(a0 + a1*tt_future, start = c(1978, 1), frequency = 4 )
# Fit ARMA model using the BIC to select the optimal order:
reminder_model <- auto.arima(x, d=0, D=0, seasonal=FALSE, ic = "bic")
reminder_model_forecast <- forecast(reminder_model, h = 10)
x_predicted <- reminder_model_forecast$mean
# Combine all forecasts:
infl_predicted <- trend_predicted + season_predicted + x_predicted
infl_predicted
plot(qinfl,type='o', main='', xlim = c(1953, 1981))
lines(infl_predicted, col="red", type='o')
infl
time(infl)
qinfl
# forecast the
infl <- window(qinfl, end = c(1978, 4))
# plot
plot(infl)
grid()
# Create a data frame that allows us to estimate trend and seasonality:
trendseason_df <- data.frame(y=infl,
s1 = rep(c(1,0,0,0), length(infl)/4),
s2 = rep(c(0,1,0,0), length(infl)/4),
s3 = rep(c(0,0,1,0), length(infl)/4),
s4 = rep(c(0,0,0,1), length(infl)/4),
tt = time(infl))
# Estimate the parameters: run without intercept
trendseason_reg <- lm(y ~ tt + s1 + s2 + s3 + s4 -1, data = trendseason_df)
# Define a0:
a0 <- mean(coef(trendseason_reg)[c("s1", "s2", "s3", "s4")])
# Get a1:
a1 <- coef(trendseason_reg)["tt"]
# Define the seasonal components:
season_components <- coef(trendseason_reg)[c("s1", "s2", "s3", "s4")] - a0
# Get the residual component:
x <- infl - fitted(trendseason_reg)
# Forecasts of the seasonal pattern:
season_predicted <- ts(rep(season_components, 2), start = c(1979, 1), frequency = 4)
# Forecast of the trend:
tt_future <- seq(1979, 1980.25, by = 0.25)
trend_predicted <- ts(a0 + a1*tt_future, start = c(1979, 1), frequency = 4 )
# Fit ARMA model using the BIC to select the optimal order:
reminder_model <- auto.arima(x, d=0, D=0, seasonal=FALSE, ic = "bic")
# Obtain forecasts:
library(forecast)
reminder_model_forecast <- forecast(reminder_model, h = 6)
x_predicted <- reminder_model_forecast$mean
# Combine all forecasts:
infl_predicted <- trend_predicted + season_predicted + x_predicted
plot(qinfl,type='o', main='', xlim = c(1953, 1981))
lines(infl_predicted, col="red", type='o')
# Create a data frame that allows us to estimate trend and seasonality:
trendseason_df <- data.frame(y=infl,
s1 = rep(c(1,0,0,0), length(infl)/4),
s2 = rep(c(0,1,0,0), length(infl)/4),
s3 = rep(c(0,0,1,0), length(infl)/4),
s4 = rep(c(0,0,0,1), length(infl)/4),
tt = time(infl),
tt2 = time(infl)^2)
# Estimate the parameters: run without intercept
trendseason_reg <- lm(y ~ tt + tt2 + s1 + s2 + s3 + s4 -1, data = trendseason_df)
summary(trendseason_reg)
# Define a0:
a0 <- mean(coef(trendseason_reg)[c("s1", "s2", "s3", "s4")])
# Get a1:
a1 <- coef(trendseason_reg)["tt"]
# Define the seasonal components:
season_components <- coef(trendseason_reg)[c("s1", "s2", "s3", "s4")] - a0
# Get the residual component:
x <- infl - fitted(trendseason_reg)
# Define a0:
a0 <- mean(coef(trendseason_reg)[c("s1", "s2", "s3", "s4")])
# Get a1:
a1 <- coef(trendseason_reg)["tt"]
# Define the seasonal components:
season_components <- coef(trendseason_reg)[c("s1", "s2", "s3", "s4")] - a0
# Get the residual component:
x <- infl - fitted(trendseason_reg)
# Forecasts of the seasonal pattern:
season_predicted <- ts(rep(season_components, 2), start = c(1979, 1), frequency = 4)
# Forecast of the trend:
tt_future <- seq(1979, 1980.25, by = 0.25)
trend_predicted <- ts(a0 + a1*tt_future + a2*coef(trendseason_reg)["tt2"], start = c(1979, 1), frequency = 4 )
# Fit ARMA model using the BIC to select the optimal order:
reminder_model <- auto.arima(x, d=0, D=0, seasonal=FALSE, ic = "bic")
# Obtain forecasts:
library(forecast)
reminder_model_forecast <- forecast(reminder_model, h = 6)
x_predicted <- reminder_model_forecast$mean
# Combine all forecasts:
infl_predicted <- trend_predicted + season_predicted + x_predicted
trend_predicted <- ts(a0 + a1*tt_future + tt_future^2*coef(trendseason_reg)["tt2"], start = c(1979, 1), frequency = 4 )
trend_predicted
# Fit ARMA model using the BIC to select the optimal order:
reminder_model <- auto.arima(x, d=0, D=0, seasonal=FALSE, ic = "bic")
# Obtain forecasts:
library(forecast)
reminder_model_forecast <- forecast(reminder_model, h = 6)
x_predicted <- reminder_model_forecast$mean
# Combine all forecasts:
infl_predicted <- trend_predicted + season_predicted + x_predicted
plot(qinfl,type='o', main='', xlim = c(1953, 1981))
lines(infl_predicted, col="red", type='o')
# Full approach
# get the data: not that we keep only data up to the end of 2014, so that we can
# forecast the
infl <- window(qinfl, end = c(1978, 4))
# plot
plot(infl)
grid()
# Create a data frame that allows us to estimate trend and seasonality:
trendseason_df <- data.frame(y=infl,
s1 = rep(c(1,0,0,0), length(infl)/4),
s2 = rep(c(0,1,0,0), length(infl)/4),
s3 = rep(c(0,0,1,0), length(infl)/4),
s4 = rep(c(0,0,0,1), length(infl)/4),
tt = time(infl),
tt2 = time(infl)^2)
# Estimate the parameters: run without intercept
trendseason_reg <- lm(y ~ tt + tt2 + s1 + s2 + s3 + s4 -1, data = trendseason_df)
# Define a0:
a0 <- mean(coef(trendseason_reg)[c("s1", "s2", "s3", "s4")])
# Get a1:
a1 <- coef(trendseason_reg)["tt"]
# Get a2:
a2 <- coef(trendseason_reg)["tt2"]
# Define the seasonal components:
season_components <- coef(trendseason_reg)[c("s1", "s2", "s3", "s4")] - a0
# Get the residual component:
x <- infl - fitted(trendseason_reg)
# Forecasts of the seasonal pattern:
season_predicted <- ts(rep(season_components, 2), start = c(1979, 1), frequency = 4)
# Forecast of the trend:
tt_future <- seq(1979, 1980.25, by = 0.25)
trend_predicted <- ts(a0 + a1*tt_future + a2*tt_future^2, start = c(1979, 1), frequency = 4 )
# Fit ARMA model using the BIC to select the optimal order:
reminder_model <- auto.arima(x, d=0, D=0, seasonal=FALSE, ic = "bic")
# Obtain forecasts:
library(forecast)
reminder_model_forecast <- forecast(reminder_model, h = 6)
x_predicted <- reminder_model_forecast$mean
# Combine all forecasts:
infl_predicted <- trend_predicted + season_predicted + x_predicted
# Plot the forecasts against the original time series
plot(qinfl,type='o', main='', xlim = c(1953, 1981))
lines(infl_predicted, col="red", type='o')
# Estimate the parameters: run without intercept
# trendseason_reg <- lm(y ~ tt + tt2 + s1 + s2 + s3 + s4 -1, data = trendseason_df)
trendseason_reg <- lm(y ~ tt + tt2, data = trendseason_df)
a0 <- coef(trendseason_reg)[1]
# Get a1:
a1 <- coef(trendseason_reg)["tt"]
# Get a2:
a2 <- coef(trendseason_reg)["tt2"]
# Get the residual component:
x <- infl - fitted(trendseason_reg)
# Forecast of the trend:
tt_future <- seq(1979, 1980.25, by = 0.25)
trend_predicted <- ts(a0 + a1*tt_future + a2*tt_future^2, start = c(1979, 1), frequency = 4 )
# Fit ARMA model using the BIC to select the optimal order:
reminder_model <- auto.arima(x, d=0, D=0, seasonal=FALSE, ic = "bic")
reminder_model_forecast <- forecast(reminder_model, h = 6)
x_predicted <- reminder_model_forecast$mean
infl_predicted <- trend_predicted  + x_predicted
# Plot the forecasts against the original time series
plot(qinfl,type='o', main='', xlim = c(1953, 1981))
lines(infl_predicted, col="red", type='o')
# Check the reminder:
# plot ACF:
acf(x)
infl <- window(qinfl, end = c(1978, 4))
# plot
plot(infl)
grid()
# Create a data frame that allows us to estimate trend and seasonality:
trendseason_df <- data.frame(y=infl,
s1 = rep(c(1,0,0,0), length(infl)/4),
s2 = rep(c(0,1,0,0), length(infl)/4),
s3 = rep(c(0,0,1,0), length(infl)/4),
s4 = rep(c(0,0,0,1), length(infl)/4),
tt = time(infl),
tt2 = time(infl)^2)
# Estimate the parameters: run without intercept
trendseason_reg <- lm(y ~ tt + tt2 + s1 + s2 + s3 + s4 -1, data = trendseason_df)
# Define a0:
a0 <- mean(coef(trendseason_reg)[c("s1", "s2", "s3", "s4")])
# Get a1:
a1 <- coef(trendseason_reg)["tt"]
# Get a2:
a2 <- coef(trendseason_reg)["tt2"]
# Define the seasonal components:
season_components <- coef(trendseason_reg)[c("s1", "s2", "s3", "s4")] - a0
# Get the residual component:
x <- infl - fitted(trendseason_reg)
# Check the reminder:
# plot ACF:
acf(x)
# Check the reminder:
# plot ACF:
acf(x)
auto.arima(x)
# Check the reminder:
test_x <- ur.df(x, type = "drift", selectlags = "BIC")
test_x
summary(test_x)
# Plot the forecasts against the original time series
plot(qinfl,type='o', main='', xlim = c(1953, 1981), ylab = "Inflation")
infl_predicted - qinfl
mean((infl_predicted - qinfl)^2)
infl_predicted <- trend_predicted + season_predicted
mean((infl_predicted - qinfl)^2)
model_unemp_rate <- auto.arima(unemp_rate, d=0, D=0, seasonal=FALSE, ic = "bic")
model_unemp_rate
model_unemp_rate
model_unemp_rate <- auto.arima(unemp_rate, d=0, D=0, seasonal=FALSE, ic = "bic")
# We obtain forecasts with the function 'forecast' from the package 'forecast':
# install.packages("forecast")
library(forecast)
model_unemp_rate_forecast <- forecast(model_unemp_rate, h = 5)
# The function returns many information, we just need the expected
# value of the reminder term:
unemp_rate_predicted <- model_unemp_rate_forecast$mean
unemp_rate_predicted
plot(unemp_rate)
plot(unemp_rate_predicted)
unemp_rate
plot(unemp_rate, xlim=c(1760, 2025) type='l', main='', ylab='Annual unemployment rate in %')
plot(unemp_rate, xlim=c(1760, 2025), type='l', main='', ylab='Annual unemployment rate in %')
lines(unemp_rate_predicted, col="red")
plot(unemp_rate, xlim=c(1760, 2016+20), type='l', main='', ylab='Annual unemployment rate in %')
model_unemp_rate_forecast <- forecast(model_unemp_rate, h = 20)
# The function returns many information, we just need the expected
# value of the reminder term:
unemp_rate_predicted <- model_unemp_rate_forecast$mean
plot(unemp_rate, xlim=c(1760, 2016+20), type='l', main='', ylab='Annual unemployment rate in %')
lines(unemp_rate_predicted, col="red")
mean(unemp_rate)
abline(h=mean(unemp_rate))
abline(h=mean(unemp_rate), type="dashed")
?abline
abline(h=mean(unemp_rate), lty=2)
plot(unemp_rate, xlim=c(1760, 2016+20), type='l', main='', ylab='Annual unemployment rate in %')
lines(unemp_rate_predicted, col="red")
abline(h=mean(unemp_rate), lty=2)
model_unemp_rate
unemp_rate
4.9*1.0102 -0.1589*5.38 + 5.5
unemp_rate_predicted
5.5*(1-1.0102+0.1589)
4.9*1.0102 -0.1589*5.38 + 0.81785
model_unemp_rate <- auto.arima(window(unemp_rate, end = 2008), d=0, D=0, seasonal=FALSE, ic = "bic")
model_unemp_rate_forecast <- forecast(model_unemp_rate, h = 20)
# The function returns many information, we just need the expected
# value of the reminder term:
unemp_rate_predicted <- model_unemp_rate_forecast$mean
plot(unemp_rate, xlim=c(1760, 2016+20), type='l', main='', ylab='Annual unemployment rate in %')
lines(unemp_rate_predicted, col="red")
abline(h=mean(unemp_rate), lty=2)
model_unemp_rate <- auto.arima(window(unemp_rate, end = 2010), d=0, D=0, seasonal=FALSE, ic = "bic")
model_unemp_rate_forecast <- forecast(model_unemp_rate, h = 20)
# The function returns many information, we just need the expected
# value of the reminder term:
unemp_rate_predicted <- model_unemp_rate_forecast$mean
plot(unemp_rate, xlim=c(1760, 2016+20), type='l', main='', ylab='Annual unemployment rate in %')
lines(unemp_rate_predicted, col="red")
abline(h=mean(unemp_rate), lty=2)
# Plot the forecasting results
plot(unemp_rate, xlim=c(1760, 2016+20), type='l', main='', ylab='Annual unemployment rate in %')
grid()
lines(unemp_rate_predicted, col="red")
abline(h=mean(unemp_rate), lty=2)
# Forecasting ARMA models
# First we have to find an appropriate model (we use the BIC):
model_unemp_rate <- auto.arima(unemp_rate, d=0, D=0, seasonal=FALSE, ic = "bic")
# We obtain forecasts with the function 'forecast' from the package 'forecast':
# install.packages("forecast")
library(forecast)
model_unemp_rate_forecast <- forecast(model_unemp_rate, h = 20)
# The function returns many information, we just need the expected
# value of the reminder term:
unemp_rate_predicted <- model_unemp_rate_forecast$mean
# Plot the forecasting results
plot(unemp_rate, xlim=c(1760, 2016+20), type='l', main='', ylab='Annual unemployment rate in %')
grid()
lines(unemp_rate_predicted, col="red")
abline(h=mean(unemp_rate), lty=2)
auto.arima(infl)
forecast(auto.arima(infl), h=6)
plot(forecast(auto.arima(infl), h=6))
at <- forecast(auto.arima(infl), h=6)$mean
# Plot the forecasts against the original time series
plot(qinfl,type='o', main='', xlim = c(1953, 1981), ylab = "Inflation")
lines(infl_predicted, col="red", type='o')
grid()
lines(at, col="blue", type='o')
plot(unemp_rate_predicted)
plot(model_unemp_rate_forecast)
summary(model_unemp_rate)
5.5114/(1-1.0102  +0.1589)
5.5114*(1-1.0102  +0.1589)
coef(model_unemp_rate)
# Forecasting ARMA models
# First we have to find an appropriate model (we use the BIC):
model_unemp_rate <- auto.arima(unemp_rate, d=0, D=0, seasonal=FALSE, ic = "bic")
summary(model_unemp_rate)
# We obtain forecasts with the function 'forecast' from the package 'forecast':
# install.packages("forecast")
library(forecast)
model_unemp_rate_forecast <- forecast(model_unemp_rate, h = 20)
# The function returns many information, we just need the
# expected value:
unemp_rate_predicted <- model_unemp_rate_forecast$mean
# Plot the forecasting results
plot(unemp_rate, xlim=c(1760, 2016+20), type='l', main='', ylab='Annual unemployment rate in %')
grid()
lines(unemp_rate_predicted, col="red")
abline(h=mean(unemp_rate), lty=2)
